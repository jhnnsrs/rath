"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1334],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=o(n),m=a,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54313:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return o},toc:function(){return u},default:function(){return d}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=["components"],s={sidebar_label:"transpile",title:"links.transpile"},p=void 0,o={unversionedId:"reference/links/transpile",id:"reference/links/transpile",title:"links.transpile",description:"TranspileHandler Objects",source:"@site/docs/reference/links/transpile.md",sourceDirName:"reference/links",slug:"/reference/links/transpile",permalink:"/rath/docs/reference/links/transpile",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/links/transpile.md",tags:[],version:"current",frontMatter:{sidebar_label:"transpile",title:"links.transpile"},sidebar:"tutorialSidebar",previous:{title:"split",permalink:"/rath/docs/reference/links/split"},next:{title:"utils",permalink:"/rath/docs/reference/links/utils"}},u=[{value:"TranspileHandler Objects",id:"transpilehandler-objects",children:[],level:2},{value:"ListTranspileHandler Objects",id:"listtranspilehandler-objects",children:[],level:2},{value:"TranspilationError Objects",id:"transpilationerror-objects",children:[],level:2},{value:"TranspilationHandlerException Objects",id:"transpilationhandlerexception-objects",children:[],level:2},{value:"TranspileRegistry Objects",id:"transpileregistry-objects",children:[{value:"register_item",id:"register_item",children:[],level:4},{value:"register_list",id:"register_list",children:[],level:4},{value:"recurse_transpile",id:"recurse_transpile",children:[],level:4},{value:"transpile",id:"transpile",children:[],level:4}],level:2},{value:"TranspileLink Objects",id:"transpilelink-objects",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"transpilehandler-objects"},"TranspileHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TranspileHandler(BaseModel)\n")),(0,l.kt)("p",null,"A Transpilation Handler"),(0,l.kt)("p",null,"A TranspileHandler is a function that takes any Any and returns a\nGraphQLType. It is used to implement custom type resolution."),(0,l.kt)("p",null,"The default TranspileHandler is the identity function, which returns the\ntype passed to it."),(0,l.kt)("h2",{id:"listtranspilehandler-objects"},"ListTranspileHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class ListTranspileHandler(BaseModel)\n")),(0,l.kt)("p",null,"A List Transpile Handler"),(0,l.kt)("p",null,"Similar to a TranspileHandler, but takes act on GraphqQLList Type of that type"),(0,l.kt)("h2",{id:"transpilationerror-objects"},"TranspilationError Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TranspilationError(Exception)\n")),(0,l.kt)("p",null,"A transpilation Exception"),(0,l.kt)("h2",{id:"transpilationhandlerexception-objects"},"TranspilationHandlerException Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TranspilationHandlerException(TranspilationError)\n")),(0,l.kt)("p",null,"A transpilation Exception happening within a TranspileHandler"),(0,l.kt)("h2",{id:"transpileregistry-objects"},"TranspileRegistry Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TranspileRegistry(BaseModel)\n")),(0,l.kt)("p",null,"A Registry to hold TranspileHandlers"),(0,l.kt)("h4",{id:"register_item"},"register","_","item"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def register_item(graphql_type: str,\n                  predicate: Callable[[Any], bool],\n                  name=None)\n")),(0,l.kt)("p",null,"A Decorator for registering a TranspileHandler"),(0,l.kt)("p",null,"If acting on a List of this type, the handle_list parameter should be set to True."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"registry = TranspileRegistry()\n\n@registry.register_item(&quot;ID&quot;, lambda x: isinstance(x, BaseModel))\ndef transpile_id_to_id(x):\nreturn str(x.id)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphql_type")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The graphql Type to act upon"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ",(0,l.kt)("em",{parentName:"li"},"Callable[","[Any]",", bool]")," - A predicate Function"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," _",(0,l.kt)("em",{parentName:"li"},"type"),", optional_ - A name for this hanlder. Defaults to the function name.")),(0,l.kt)("h4",{id:"register_list"},"register","_","list"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def register_list(graphql_type: str,\n                  predicate: Callable[[Any, str], bool],\n                  name=None)\n")),(0,l.kt)("p",null,"A Decorator for registering a TranspileHandler"),(0,l.kt)("p",null,"If acting on a List of this type, the handle_list parameter should be set to True."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"registry = TranspileRegistry()\n\n@registry.register_list(&quot;InputVector&quot;, lambda x, listdepth: isinstance(x, np.ndarray))\ndef transpile_numpy_array_to_vectors(x, listdepth):\nassert listdepth == 1, &quot;Only one level of nesting is supported&quot;\nreturn [InputVector(x) for x in x]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphql_type")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The graphql Type to act upon"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ",(0,l.kt)("em",{parentName:"li"},"Callable[","[Any]",", bool]")," - A predicate Function"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"handle_list")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - Should we act on lists of this type. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," _",(0,l.kt)("em",{parentName:"li"},"type"),", optional_ - A name for this hanlder. Defaults to the function name.")),(0,l.kt)("h4",{id:"recurse_transpile"},"recurse","_","transpile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def recurse_transpile(key,\n                      var: VariableNode,\n                      value: Any,\n                      registry: TranspileRegistry,\n                      in_list=0,\n                      strict=False)\n")),(0,l.kt)("p",null,"Recurse Transpile a variable according to a registry and\nits definition"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key")," ",(0,l.kt)("strong",{parentName:"li"},"type")," - The key of the variable"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"var")," ",(0,l.kt)("em",{parentName:"li"},"VariableNode")," - The variable definition node correspoin to this variable"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value")," ",(0,l.kt)("em",{parentName:"li"},"Any")," - The to transpile valued"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"registry")," ",(0,l.kt)("em",{parentName:"li"},"TranspileRegistry")," - The transpile registry to use"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"in_list")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - Recursive Parameter. That will be set to the list depth. Defaults to False."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strict")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - Should we error on predicate errors. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TranspilationError")," - ",(0,l.kt)("em",{parentName:"li"},"description"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Any")," - The transpiled value or the original value if no handler matched")),(0,l.kt)("h4",{id:"transpile"},"transpile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def transpile(op: OperationDefinitionNode,\n              variables: Dict[str, Any],\n              registry: TranspileRegistry,\n              strict=False) -> Dict[str, Any]\n")),(0,l.kt)("p",null,"Transpile"),(0,l.kt)("p",null,"Transpiles a operations variabels to a dictionary of variables, with\njson serializable values according to a transpile registry."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"op")," ",(0,l.kt)("em",{parentName:"li"},"OperationDefinitionNode")," - The operation definition node,"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"registry")," ",(0,l.kt)("em",{parentName:"li"},"TranspileRegistry")," - The registry"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strict")," ",(0,l.kt)("em",{parentName:"li"},"bool, optional")," - Should we fail if a handler predicate fails. Defaults to False.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Dict")," - The transpiled variables")),(0,l.kt)("h2",{id:"transpilelink-objects"},"TranspileLink Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TranspileLink(ParsingLink)\n")),(0,l.kt)("p",null,"Transpile Link"),(0,l.kt)("p",null,"Transpile Link is a link that transpiles variables according to a transpile registry."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"registry")," ",(0,l.kt)("em",{parentName:"li"},"TranspileRegistry")," - The transpile registry to use"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strict")," ",(0,l.kt)("em",{parentName:"li"},"bool")," - Should we fail if a handler predicate fails. Defaults to False.")))}d.isMDXComponent=!0}}]);