"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[669],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<l;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},81088:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var n=r(87462),a=r(63366),l=(r(67294),r(3905)),i=["components"],p={sidebar_label:"utils",title:"links.utils"},o=void 0,s={unversionedId:"reference/links/utils",id:"reference/links/utils",title:"links.utils",description:"recurse\\parse\\variables",source:"@site/docs/reference/links/utils.md",sourceDirName:"reference/links",slug:"/reference/links/utils",permalink:"/rath/docs/reference/links/utils",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/links/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"links.utils"},sidebar:"tutorialSidebar",previous:{title:"transpile",permalink:"/rath/docs/reference/links/transpile"},next:{title:"validate",permalink:"/rath/docs/reference/links/validate"}},u=[{value:"recurse_parse_variables",id:"recurse_parse_variables",children:[],level:4},{value:"recurse_parse_variables_with_operation",id:"recurse_parse_variables_with_operation",children:[],level:4}],c={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"recurse_parse_variables"},"recurse","_","parse","_","variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def recurse_parse_variables(variables: Dict, predicate: Callable[[str, Any],\n                                                                 bool],\n                            apply: Callable[[Any], Any]) -> Dict\n")),(0,l.kt)("p",null,"Parse Variables"),(0,l.kt)("p",null,"Recursively traverse variables, applying the apply function to the value if the predicate\nreturns True."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variables")," ",(0,l.kt)("em",{parentName:"li"},"Dict")," - The dictionary to parse.\npredicate (Callable[","[str, Any]",", bool]):The path this is in"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"apply")," ",(0,l.kt)("em",{parentName:"li"},"Callable[","[Any]",", Any]")," - ",(0,l.kt)("em",{parentName:"li"},"description"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Dict")," - ",(0,l.kt)("em",{parentName:"li"},"description"))),(0,l.kt)("h4",{id:"recurse_parse_variables_with_operation"},"recurse","_","parse","_","variables","_","with","_","operation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def recurse_parse_variables_with_operation(\n        variables: Dict, operation: Operation,\n        predicate: Callable[[str, Any], bool], apply: Callable[[Any],\n                                                               Any]) -> Dict\n")),(0,l.kt)("p",null,"Parse Variables"),(0,l.kt)("p",null,"Recursively traverse variables, applying the apply function to the value if the predicate\nreturns True."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"variables")," ",(0,l.kt)("em",{parentName:"li"},"Dict")," - The dictionary to parse."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"predicate")," ",(0,l.kt)("em",{parentName:"li"},"Callable[","[str, Any]",", bool]")," - ",(0,l.kt)("em",{parentName:"li"},"description")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"apply")," ",(0,l.kt)("em",{parentName:"li"},"Callable[","[Any]",", Any]")," - ",(0,l.kt)("em",{parentName:"li"},"description"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Dict")," - ",(0,l.kt)("em",{parentName:"li"},"description"))))}m.isMDXComponent=!0}}]);